// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "gitlab.com/vk-golang/lectures/06_databases/99_hw/redditclone/internal/entity"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockIService) AddComment(ctx context.Context, postID string, comment entity.CommentExtend) (entity.PostExtend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", ctx, postID, comment)
	ret0, _ := ret[0].(entity.PostExtend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockIServiceMockRecorder) AddComment(ctx, postID, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockIService)(nil).AddComment), ctx, postID, comment)
}

// AddPost mocks base method.
func (m *MockIService) AddPost(ctx context.Context, post entity.PostExtend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPost indicates an expected call of AddPost.
func (mr *MockIServiceMockRecorder) AddPost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockIService)(nil).AddPost), ctx, post)
}

// AddUser mocks base method.
func (m *MockIService) AddUser(ctx context.Context, user entity.UserExtend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockIServiceMockRecorder) AddUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockIService)(nil).AddUser), ctx, user)
}

// ContainsUser mocks base method.
func (m *MockIService) ContainsUser(ctx context.Context, username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsUser", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainsUser indicates an expected call of ContainsUser.
func (mr *MockIServiceMockRecorder) ContainsUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsUser", reflect.TypeOf((*MockIService)(nil).ContainsUser), ctx, username)
}

// DeleteComment mocks base method.
func (m *MockIService) DeleteComment(ctx context.Context, username, postID, commentID string) (entity.PostExtend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, username, postID, commentID)
	ret0, _ := ret[0].(entity.PostExtend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockIServiceMockRecorder) DeleteComment(ctx, username, postID, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockIService)(nil).DeleteComment), ctx, username, postID, commentID)
}

// DeletePost mocks base method.
func (m *MockIService) DeletePost(ctx context.Context, username, postID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, username, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockIServiceMockRecorder) DeletePost(ctx, username, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockIService)(nil).DeletePost), ctx, username, postID)
}

// DownvotePost mocks base method.
func (m *MockIService) DownvotePost(ctx context.Context, userID, postID string) (entity.PostExtend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownvotePost", ctx, userID, postID)
	ret0, _ := ret[0].(entity.PostExtend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownvotePost indicates an expected call of DownvotePost.
func (mr *MockIServiceMockRecorder) DownvotePost(ctx, userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownvotePost", reflect.TypeOf((*MockIService)(nil).DownvotePost), ctx, userID, postID)
}

// GetPost mocks base method.
func (m *MockIService) GetPost(ctx context.Context, postID string) (entity.PostExtend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, postID)
	ret0, _ := ret[0].(entity.PostExtend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockIServiceMockRecorder) GetPost(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockIService)(nil).GetPost), ctx, postID)
}

// GetPosts mocks base method.
func (m *MockIService) GetPosts(ctx context.Context) ([]entity.PostExtend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx)
	ret0, _ := ret[0].([]entity.PostExtend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockIServiceMockRecorder) GetPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockIService)(nil).GetPosts), ctx)
}

// GetPostsWithCategory mocks base method.
func (m *MockIService) GetPostsWithCategory(ctx context.Context, category string) ([]entity.PostExtend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsWithCategory", ctx, category)
	ret0, _ := ret[0].([]entity.PostExtend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsWithCategory indicates an expected call of GetPostsWithCategory.
func (mr *MockIServiceMockRecorder) GetPostsWithCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsWithCategory", reflect.TypeOf((*MockIService)(nil).GetPostsWithCategory), ctx, category)
}

// GetPostsWithUser mocks base method.
func (m *MockIService) GetPostsWithUser(ctx context.Context, username string) ([]entity.PostExtend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsWithUser", ctx, username)
	ret0, _ := ret[0].([]entity.PostExtend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsWithUser indicates an expected call of GetPostsWithUser.
func (mr *MockIServiceMockRecorder) GetPostsWithUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsWithUser", reflect.TypeOf((*MockIService)(nil).GetPostsWithUser), ctx, username)
}

// GetUser mocks base method.
func (m *MockIService) GetUser(ctx context.Context, username string) (entity.UserExtend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, username)
	ret0, _ := ret[0].(entity.UserExtend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIServiceMockRecorder) GetUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIService)(nil).GetUser), ctx, username)
}

// SortPostsByTime mocks base method.
func (m *MockIService) SortPostsByTime(posts []entity.PostExtend) []entity.PostExtend {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortPostsByTime", posts)
	ret0, _ := ret[0].([]entity.PostExtend)
	return ret0
}

// SortPostsByTime indicates an expected call of SortPostsByTime.
func (mr *MockIServiceMockRecorder) SortPostsByTime(posts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortPostsByTime", reflect.TypeOf((*MockIService)(nil).SortPostsByTime), posts)
}

// UnvotePost mocks base method.
func (m *MockIService) UnvotePost(ctx context.Context, userID, postID string) (entity.PostExtend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnvotePost", ctx, userID, postID)
	ret0, _ := ret[0].(entity.PostExtend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnvotePost indicates an expected call of UnvotePost.
func (mr *MockIServiceMockRecorder) UnvotePost(ctx, userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnvotePost", reflect.TypeOf((*MockIService)(nil).UnvotePost), ctx, userID, postID)
}

// UpvotePost mocks base method.
func (m *MockIService) UpvotePost(ctx context.Context, userID, postID string) (entity.PostExtend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpvotePost", ctx, userID, postID)
	ret0, _ := ret[0].(entity.PostExtend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpvotePost indicates an expected call of UpvotePost.
func (mr *MockIServiceMockRecorder) UpvotePost(ctx, userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpvotePost", reflect.TypeOf((*MockIService)(nil).UpvotePost), ctx, userID, postID)
}
